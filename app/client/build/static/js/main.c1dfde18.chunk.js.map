{"version":3,"sources":["components/ImagesList.js","components/Log.js","components/Home.js","components/Settings.js","App.js","serviceWorker.js","index.js"],"names":["ALL_REPOS","ImagesList","props","state","filteredImages","images","selectedRepo","selectRepo","bind","e","repo","target","value","this","setState","prevProps","title","selected","handleChange","FormControl","className","InputLabel","shrink","Select","onChange","key","Object","keys","map","multiple","native","image","tag","React","Component","Log","data","values","log","time","status","Home","srcImages","dstImages","selectedDev","selectedProd","logs","semWaiting","configs","src_registry","ADDRESS","dst_registry","axios","get","then","res","getReposData","catch","err","console","event","options","i","l","length","push","url","alert","proceed","post","window","confirm","join","confirmed","duplicatesConfirmationString","hasOwnProperty","Array","isArray","currentDate","Date","getHours","getMinutes","getSeconds","unshift","handleChangeMultiple","Button","variant","color","onClick","moveImages","endIcon","startIcon","removeImages","to","Settings","saving","subkey","noValidate","autoComplete","FormGroup","row","TextField","fullWidth","id","label","margin","USERNAME","PASSWORD","repositories","split","prefixes","FormControlLabel","control","Checkbox","checked","force_sync","inputProps","save","App","path","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.c1dfde18.chunk.js","sourcesContent":["import React from 'react'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport FormControl from '@material-ui/core/FormControl'\nimport Select from '@material-ui/core/Select'\n\nconst ALL_REPOS = '*'\n\nclass ImagesList extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            filteredImages: props.images,\n            selectedRepo: ALL_REPOS\n        }\n        this.selectRepo = this.selectRepo.bind(this)\n    }\n\n    selectRepo(e) {\n        const repo = e.target.value\n        const {images} = this.props\n        if (repo === ALL_REPOS) {\n            this.setState({\n                filteredImages: images,\n                selectedRepo: ALL_REPOS\n            })\n            return\n        }\n        let filteredImages = {}\n        filteredImages[repo] = images[repo]\n        this.setState({\n            filteredImages: filteredImages,\n            selectedRepo: repo\n        })\n    }\n\n    componentDidUpdate(prevProps) {\n        if (prevProps.images === this.props.images) return\n\n        this.setState({\n            filteredImages: this.props.images\n        })\n    }\n\n    render() {\n        const { title, images, selected, handleChange } = this.props\n        const { filteredImages, selectedRepo } = this.state\n        return (\n            <FormControl className='form-control'>\n                <InputLabel shrink>\n                    {title}\n                </InputLabel>\n                <Select\n                    value={selectedRepo}\n                    onChange={this.selectRepo}\n                    className=\"select-repo\"\n                >\n                    <option key={ALL_REPOS} value={ALL_REPOS}>Все репозитории</option>\n                    {Object.keys(images).map(repo => {\n                        return (\n                            <option key={repo} value={repo}>\n                                {repo}\n                            </option>\n                        )\n                    })}\n                </Select>\n                <Select\n                    multiple\n                    native\n                    value={selected}\n                    onChange={handleChange}\n                >\n                    {Object.keys(filteredImages).map(image => {\n                        return filteredImages[image].map(tag => {\n                            const key = image + ':' + tag\n                            return (\n                                <option key={key} value={key}>\n                                    {key}\n                                </option>\n                            )\n                        })\n                    })}\n                </Select>\n            </FormControl>\n        )\n    }\n}\n\nexport default ImagesList","import React from 'react'\n\nclass Log extends React.Component {\n    render() {\n        const {data} = this.props\n        return (\n            <div>\n                {Object.values(data).map(log => {\n                    return <div><span className=\"time\">{log.time}</span><span className={log.status}>{log.value}</span></div>\n                })}\n            </div>\n        )\n    }\n}\n\nexport default Log","import React from 'react'\nimport axios from 'axios'\nimport Button from '@material-ui/core/Button'\nimport Delete from '@material-ui/icons/Delete'\nimport ArrowBack from '@material-ui/icons/ArrowBack'\nimport ArrowForward from '@material-ui/icons/ArrowForward'\nimport SettingsApplications from '@material-ui/icons/SettingsApplications'\nimport { Link } from \"react-router-dom\"\n\nimport ImagesList from \"./ImagesList\"\nimport Log from \"./Log\"\n\nclass Home extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            srcImages: {},\n            dstImages: {},\n            selectedDev: [],\n            selectedProd: [],\n            logs: [],\n            semWaiting: 2,\n            configs: {\n                src_registry: {\n                    ADDRESS: ''\n                },\n                dst_registry: {\n                    ADDRESS: ''\n                }\n            }\n        }\n        axios.get('/api/get_settings').then(res => {\n            this.setState({\n                configs: res.data\n            })\n        })\n        this.getReposData()\n        this.log = this.log.bind(this)\n    }\n\n    getReposData() {\n        axios.get('/api/images/src').then(res => {\n            const images = res.data\n            this.setState({\n                srcImages: images,\n                semWaiting: this.state.semWaiting - 1\n            })\n        }).catch(err => {\n            console.log(err)\n            this.setState({\n                semWaiting: this.state.semWaiting - 1\n            })\n        })\n\n        axios.get('/api/images/dst').then(res => {\n            const images = res.data\n            this.setState({\n                dstImages: images,\n                semWaiting: this.state.semWaiting - 1\n            })\n        }).catch(err => {\n            console.log(err)\n            this.setState({\n                semWaiting: this.state.semWaiting - 1\n            })\n        })\n    }\n\n    handleChangeMultiple(event) {\n        const { options } = event.target;\n        const value = [];\n        for (let i = 0, l = options.length; i < l; i += 1) {\n            if (options[i].selected) {\n                value.push(options[i].value);\n            }\n        }\n        return value\n    }\n\n    moveImages(image) {\n        const { selectedDev, selectedProd } = this.state\n        let selected = selectedDev\n        let url = 'dst'\n\n        if (selectedProd.length > 0) {\n            selected = selectedProd\n            url = 'src'\n        }\n\n        if (selected.length === 0) alert('Choose image(s)');\n\n        this.setState({\n            semWaiting: 2\n        })\n\n        let proceed = 0\n        for (const image of selected) {\n            this.log(image + ' - копируется на ' + url)\n            axios.post('/api/move/to_' + url, {\n                image: image\n            }).then(res => {\n                if (++proceed === selected.length) this.getReposData()\n                this.log(image + ' - скопирован на ' + url, 'success')\n            }).catch(err => {\n                console.log(err)\n                if (++proceed === selected.length) this.getReposData()\n                this.log(image + ' - ошибка во время копирования на ' + url, 'error')\n            })\n        }\n    }\n\n    removeImages() {\n        console.log('asd')\n        const { selectedDev, selectedProd } = this.state\n        let selected = selectedDev\n        let url = 'src'\n        if (selectedProd.length > 0) {\n            selected = selectedProd\n            url = 'dst'\n        }\n        if (selected.length === 0) {\n            alert('Choose image(s)')\n            return\n        }\n\n        if (!window.confirm('Вы уверены что хотите удалить эти теги?: \\n' + selected.join(';\\n'))) return\n\n        this.setState({\n            semWaiting: 2\n        })\n\n        let proceed = 0\n\n        axios.post('/api/check_if_can_be_removed/' + url, {\n            images: selected\n        }).then(res => {\n            let confirmed = 1\n            if (Object.keys(res.data).length > 0) {\n                let duplicatesConfirmationString = 'Внимание! \\n' +\n                    'Удалив следующие теги, вы также удалите и их дупликаты.'\n\n                for (const image in res.data) {\n                    if (!res.data.hasOwnProperty(image) || Array.isArray(res.data)) continue\n                    const duplicates = res.data[image]\n                    duplicatesConfirmationString += '\\nДля тега ' + image\n                    + ' дупликаты:\\n'\n                    + duplicates.join('\\n')\n                }\n\n                duplicatesConfirmationString += '\\nПродолжить?'\n\n                confirmed = window.confirm(duplicatesConfirmationString)\n            }\n\n            if (!confirmed) {\n                this.getReposData()\n                return\n            }\n\n            for (const image of selected) {\n                this.log(image + ' - удаляется с реестра ' + url)\n                axios.post('/api/remove/' + url, {\n                    image: image\n                }).then(res => {\n                     this.log(image + ' - удален с реестра ' + url)\n                     if (++proceed === selected.length) this.getReposData()\n                }).catch(err => {\n                     console.log(err)\n                     this.log(image + ' - ошибка во время удаления с реестра ' + url)\n                     if (++proceed === selected.length) this.getReposData()\n                })\n            }\n        }).catch(err => {\n            console.log(err)\n            this.getReposData()\n        })\n    }\n\n    log(value, status = 'default') {\n        const currentDate = new Date()\n        const log = {\n            time: currentDate.getHours() + ':'\n                + currentDate.getMinutes() + ':'\n                + currentDate.getSeconds(),\n            value,\n            status\n        }\n        let logs = this.state.logs\n        logs.unshift(log)\n        this.setState({\n            logs: logs\n        })\n    }\n\n    render() {\n        const {srcImages, dstImages, selectedDev, selectedProd, semWaiting, configs} = this.state\n        return (\n            <div className='App'>\n                { semWaiting > 0 && <div className='preloader'>\n                    <div className=\"lds-ring\"><div></div><div></div><div></div><div></div></div>\n                </div> }\n                <div className='images-list'>\n                    <ImagesList\n                        images={srcImages}\n                        title={'src ' + configs.src_registry.ADDRESS}\n                        selected={selectedDev}\n                        handleChange={(event) => {\n                            this.setState({\n                                selectedProd: [],\n                                selectedDev: this.handleChangeMultiple(event)\n                            })\n                        }}\n                    />\n                </div>\n                <div className='actions-list'>\n                    { selectedDev.length > 0 && <div className='button-wrapper'>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={()=>{this.moveImages()}}\n                            endIcon={<ArrowForward />}\n                        >\n                            Копировать на dst\n                        </Button>\n                    </div>}\n                    { selectedProd.length > 0 && <div className='button-wrapper'>\n                        <Button\n                            variant=\"contained\"\n                            color=\"primary\"\n                            onClick={()=>{this.moveImages()}}\n                            startIcon={<ArrowBack />}\n                        >\n                            Копировать на src\n                        </Button>\n                    </div>}\n                    <div className='button-wrapper'>\n                        <Button\n                            variant=\"contained\"\n                            color=\"secondary\"\n                            onClick={()=>{this.removeImages()}}\n                            endIcon={<Delete />}\n                        >\n                            Удалить\n                        </Button>\n                    </div>\n                </div>\n                <div className='images-list'>\n                    <ImagesList\n                        images={dstImages}\n                        title={'dst ' + configs.dst_registry.ADDRESS}\n                        selected={selectedProd}\n                        handleChange={(event) => {\n                            this.setState({\n                                selectedDev: [],\n                                selectedProd: this.handleChangeMultiple(event)\n                            })\n                        }}\n                    />\n                </div>\n                <div className=\"settings-btn\">\n                    <Link to=\"/settings\">\n                        <SettingsApplications />\n                    </Link>\n                </div>\n                <div className=\"logs\">\n                    <Log data={this.state.logs} />\n                </div>\n            </div>\n        );\n    }\n}\n\nexport default Home","import React from 'react'\nimport axios from 'axios'\nimport Button from '@material-ui/core/Button'\nimport TextField from '@material-ui/core/TextField'\nimport Checkbox from '@material-ui/core/Checkbox'\nimport FormGroup from '@material-ui/core/FormGroup'\nimport FormControlLabel from '@material-ui/core/FormControlLabel'\nimport ArrowBack from '@material-ui/icons/ArrowBack'\nimport { Link } from \"react-router-dom\"\n\nclass Settings extends React.Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            configs: {},\n            saving: false\n        }\n        axios.get('/api/get_settings').then(res => {\n            this.setState({\n                configs: res.data\n            })\n        })\n    }\n\n    handleChange(value, key, subkey) {\n        const { configs } = this.state\n        if (!! subkey) {\n            configs[key][subkey] = value\n        } else {\n            configs[key] = value\n        }\n        this.setState({\n            configs: configs\n        })\n    }\n\n    save() {\n        this.setState({saving: true})\n        axios.post('/api/save_settings', this.state.configs).then(res => {\n            this.setState({saving: false})\n        }).catch((err) => {\n            this.setState({saving: false})\n            alert(err)\n        })\n    }\n\n    render() {\n        const { configs } = this.state\n        if (!!!configs.src_registry) return 'Waiting...'\n        return (\n            <form noValidate autoComplete=\"off\" className=\"settings-form\">\n                <h2>Настройки синхронизации</h2>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"src_address\"\n                        label=\"SRC Address\"\n                        value={configs.src_registry.ADDRESS}\n                        onChange={(e) => { this.handleChange(e.target.value, 'src_registry', 'ADDRESS')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"src_login\"\n                        label=\"SRC Auth username\"\n                        value={configs.src_registry.USERNAME}\n                        onChange={(e) => { this.handleChange(e.target.value, 'src_registry', 'USERNAME')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"src_password\"\n                        label=\"SRC Password\"\n                        value={configs.src_registry.PASSWORD}\n                        onChange={(e) => { this.handleChange(e.target.value, 'src_registry', 'PASSWORD')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"dst_address\"\n                        label=\"DST Address\"\n                        value={configs.dst_registry.ADDRESS}\n                        onChange={(e) => { this.handleChange(e.target.value, 'dst_registry', 'ADDRESS')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"dst_username\"\n                        label=\"DST Auth username\"\n                        value={configs.dst_registry.USERNAME}\n                        onChange={(e) => { this.handleChange(e.target.value, 'dst_registry', 'USERNAME')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"dst_password\"\n                        label=\"DST Password\"\n                        value={configs.dst_registry.PASSWORD}\n                        onChange={(e) => { this.handleChange(e.target.value, 'dst_registry', 'PASSWORD')}}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"repositories\"\n                        label={ 'Необходимые репозитории через запятую' +\n                            '(оставьте поле пустым, если нужны все репозитории)' }\n                        value={\n                            configs.repositories.join(', ')\n                        }\n                        onChange={(e) => {\n                            let value = e.target.value\n                            value = value.split(', ')\n                            this.handleChange(value, 'repositories')\n                        }}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <TextField\n                        fullWidth\n                        id=\"prefixes\"\n                        label={ 'Префиксы тегов через запятую' +\n                            '(оставьте пустым, если нужны все теги)' }\n                        value={\n                            configs.prefixes.join(', ')\n                        }\n                        onChange={(e) => {\n                            let value = e.target.value\n                            value = value.split(', ')\n                            this.handleChange(value, 'prefixes')\n                        }}\n                        margin=\"normal\"\n                    />\n                </FormGroup>\n                <FormGroup row>\n                    <FormControlLabel\n                        control={\n                            <Checkbox\n                                checked={configs.force_sync}\n                                onChange={(e) => { this.handleChange(e.target.checked, 'force_sync')}}\n                                value=\"force_sync\"\n                                inputProps={{\n                                    'aria-label': 'primary checkbox',\n                                }}\n                            />\n                        }\n                        label=\"Удалять дублирующиеся теги\"\n                    />\n                </FormGroup>\n                <Button\n                    variant=\"contained\"\n                    color=\"primary\"\n                    onClick={()=>{this.save()}}\n                >\n                    { this.state.saving === false ? 'Сохранить' : 'Сохраняется...' }\n                </Button>\n                <Link to=\"/\" className=\"return-btn\">\n                    <Button\n                        variant=\"contained\"\n                        color=\"default\"\n                        startIcon={<ArrowBack />}\n                    >\n                        Вернуться\n                    </Button>\n                </Link>\n            </form>\n        )\n    }\n}\n\nexport default Settings","import React from 'react'\nimport {\n  BrowserRouter as Router,\n  Switch,\n  Route\n} from \"react-router-dom\"\nimport Home from './components/Home.js'\nimport Settings from './components/Settings.js'\nimport './App.css'\n\nclass App extends React.Component {\n    render() {\n        return (\n            <Router>\n                <Switch>\n                    <Route path=\"/settings\">\n                        <Settings />\n                    </Route>\n                    <Route path=\"/\">\n                        <Home />\n                    </Route>\n                </Switch>\n            </Router>\n        )\n    }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}